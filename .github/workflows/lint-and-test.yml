name: Code Quality and Linting

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Linting and Quality Checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-import-order flake8-docstrings flake8-bugbear
        # Install project dependencies if requirements.txt exists
        if [ -f backend/core/requirements.txt ]; then
          pip install -r backend/core/requirements.txt
        fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ --count --exit-zero --statistics

    - name: Run flake8 with detailed output
      run: |
        echo "Running flake8 on backend Python code..."
        flake8 backend/ --format=github

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: lint

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/core/requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests and collect coverage
      working-directory: backend
      env:
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_db
      run: |
        pytest tests/test_postgres_engine.py -m "not integration" -v --cov=core.engines --cov-report=xml --cov-report=term > coverage.txt

    - name: Upload coverage report artifact (XML)
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml
        path: backend/coverage.xml

    - name: Upload coverage summary artifact (TXT)
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: backend/coverage.txt

    - name: Print coverage summary in workflow log
      run: |
        echo "==== COVERAGE SUMMARY ===="
        cat backend/coverage.txt

    - name: Add coverage summary to GitHub Actions job summary
      if: always()
      run: |
        echo '### Coverage Summary' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat backend/coverage.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
